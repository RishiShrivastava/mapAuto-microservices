# =Juggernaut= Updated docker-compose.yml for persistence and restart policies
services:
  auto_nessus:
    image: mapauto-microservices-auto_nessus:1.0
    build: ./auto_nessus_service
    ports:
      - "8000:8000"
    env_file:
      - ../.env
    # =Juggernaut= Added restart policy and volume for persistence
    restart: unless-stopped
    volumes:
      - ./scan_results:/app/scan_results
      - nessus_data:/app/data
    # =Juggernaut= Added health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  nmapscanner:
    image: mapauto-microservices-nmapscanner:1.0
    build: ./nmapscanner_service
    ports:
      - "8001:8001"
    env_file:
      - ../.env
    # =Juggernaut= Added restart policy and volume for persistence
    restart: unless-stopped
    volumes:
      - ./scan_results:/app/scan_results
    # =Juggernaut= Added health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  nmapall:
    image: mapauto-microservices-nmapall:1.0
    build: ./nmapall_service
    ports:
      - "8002:8002"
    env_file:
      - ../.env
    # =Juggernaut= Added restart policy and volume for persistence
    restart: unless-stopped
    volumes:
      - ./scan_results:/app/scan_results
    # =Juggernaut= Added health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  osscan:
    image: mapauto-microservices-osscan:1.0
    build: ./osscan_service
    ports:
      - "8003:8003"
    env_file:
      - ../.env
    # =Juggernaut= Added restart policy and volume for persistence
    restart: unless-stopped
    volumes:
      - ./scan_results:/app/scan_results
    # =Juggernaut= Added health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  portxmlparser:
    image: mapauto-microservices-portxmlparser:1.0
    build: ./portxmlparser_service
    ports:
      - "8004:8004"
    env_file:
      - ../.env
    # =Juggernaut= Added restart policy and volume for persistence
    restart: unless-stopped
    volumes:
      - ./scan_results:/app/scan_results
    # =Juggernaut= Added health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =Juggernaut= React frontend service - enhanced configuration with HTTPS
  frontend:
    build: ../frontend
    image: mapauto-microservices-frontend:1.0 # =Juggernaut=
    container_name: mapauto-frontend # =Juggernaut=
    ports:
      - "3000:3000" # =Juggernaut= Keep original port for development
    restart: unless-stopped # =Juggernaut=
    environment:
      - CHOKIDAR_USEPOLLING=true # =Juggernaut= For file watching in Docker
      - WATCHPACK_POLLING=true   # =Juggernaut= For hot reload
      - HTTPS=false # =Juggernaut= Disable HTTPS inside container (handled by reverse proxy)
    depends_on:
      - nmapscanner
      - nmapall
      - osscan
      - portxmlparser
      - auto_nessus
    # =Juggernaut= Health check for frontend service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =Juggernaut= Nginx reverse proxy for HTTPS
  nginx:
    build: ../nginx
    image: mapauto-microservices-nginx:1.0 # =Juggernaut=
    container_name: mapauto-nginx # =Juggernaut=
    ports:
      - "443:443" # =Juggernaut= HTTPS port for user access
      - "80:80"   # =Juggernaut= HTTP port (redirects to HTTPS)
    restart: unless-stopped # =Juggernaut=
    depends_on:
      - frontend
      - auto_nessus
      - nmapscanner
      - nmapall
      - osscan
      - portxmlparser
    # =Juggernaut= Health check for nginx service
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# =Juggernaut= Added named volumes for data persistence
volumes:
  nessus_data:
    driver: local
    # =Juggernaut= No original code deleted, only enhanced frontend configuration
